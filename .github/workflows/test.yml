name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel previous runs if a new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set minimal permissions
permissions:
  contents: read
  pull-requests: write
  actions: read

env:
  # Global environment variables
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate environment variables
      env:
        TEST_SECRET_KEY: ${{ vars.TEST_SECRET_KEY }}
        TEST_REDIS_URL: ${{ vars.TEST_REDIS_URL }}
        TEST_TESTING: ${{ vars.TEST_TESTING }}
      run: |
        echo "Checking required environment variables..."
        if [ -z "$TEST_SECRET_KEY" ]; then
          echo "‚ùå TEST_SECRET_KEY is not set"
          exit 1
        fi
        if [ -z "$TEST_REDIS_URL" ]; then
          echo "‚ùå TEST_REDIS_URL is not set"
          exit 1
        fi
        echo "‚úÖ Environment variables validated"
        echo "‚úÖ SECRET_KEY length: ${#TEST_SECRET_KEY} characters"
        echo "‚úÖ REDIS_URL: $TEST_REDIS_URL"

    - name: Run linting checks
      id: lint
      env:
        SECRET_KEY: ${{ vars.TEST_SECRET_KEY }}
        REDIS_URL: ${{ vars.TEST_REDIS_URL }}
        TESTING: ${{ vars.TEST_TESTING }}
      run: |
        flask lint

    - name: Run tests with coverage
      id: test
      env:
        SECRET_KEY: ${{ vars.TEST_SECRET_KEY }}
        REDIS_URL: ${{ vars.TEST_REDIS_URL }}
        TESTING: ${{ vars.TEST_TESTING }}
      run: |
        flask test

    - name: Generate test summary
      if: always()
      run: |
        echo "## Test Results üß™" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Redis**: ‚úÖ Connected" >> $GITHUB_STEP_SUMMARY
        
        # Check linting status
        if [ "${{ steps.lint.outcome }}" == "success" ]; then
          echo "- **Linting**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Linting**: ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check test status
        if [ "${{ steps.test.outcome }}" == "success" ]; then
          echo "- **Tests**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Tests**: ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check coverage
        if [ -f coverage.xml ]; then
          echo "- **Coverage**: ‚úÖ Generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Coverage**: ‚ùå Not generated" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload coverage to Coveralls
      if: success() && github.event_name == 'push' && env.COVERALLS_REPO_TOKEN != ''
      uses: coverallsapp/github-action@v2
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      with:
        github-token: ${{ secrets.COVERALLS_REPO_TOKEN }}
        path-to-lcov: coverage.xml
        format: cobertura

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-python-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 7
        compression-level: 6

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let body = '## üß™ Test Results\n\n';
          
          // Add status indicators
          const lintStatus = '${{ steps.lint.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
          const testStatus = '${{ steps.test.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
          
          body += `- **Linting**: ${lintStatus} ${'${{ steps.lint.outcome }}' === 'success' ? 'Passed' : 'Failed'}\n`;
          body += `- **Tests**: ${testStatus} ${'${{ steps.test.outcome }}' === 'success' ? 'Passed' : 'Failed'}\n`;
          
          if (fs.existsSync('coverage.xml')) {
            body += '- **Coverage**: ‚úÖ Report generated and available in artifacts\n';
          } else {
            body += '- **Coverage**: ‚ùå Report not generated\n';
          }
          
          body += '\nüìä Coverage reports are available in the workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          }); 